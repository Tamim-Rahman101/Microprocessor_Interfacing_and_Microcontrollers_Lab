
Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800034c  0800034c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800034c  0800034c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800034c  0800034c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800034c  0800034c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800034c  0800034c  0000134c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000350  08000350  00001350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000354  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000358  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000358  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000af1  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000439  00000000  00000000  00002b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00002f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000012d  00000000  00000000  00003108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fdd  00000000  00000000  00003235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000191d  00000000  00000000  00004212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b46d  00000000  00000000  00005b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00080f9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e8  00000000  00000000  00080fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000814c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000334 	.word	0x08000334

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000334 	.word	0x08000334

0800014c <main>:
#define USART2_BRR	(*(volatile unsigned int *) (USART2_BASE + 0x08))
#define USART2_SR	(*(volatile unsigned int *) (USART2_BASE + 0x00))
#define USART2_DR	(*(volatile unsigned int *) (USART2_BASE + 0x04))


int main(){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
	// USART2 Clock
	RCC_APB1ENR |= 1 << 17;
 8000152:	4b29      	ldr	r3, [pc, #164]	@ (80001f8 <main+0xac>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	4a28      	ldr	r2, [pc, #160]	@ (80001f8 <main+0xac>)
 8000158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800015c:	6013      	str	r3, [r2, #0]

	// GPIOA Clock
	RCC_APB2ENR |= 1 << 2;
 800015e:	4b27      	ldr	r3, [pc, #156]	@ (80001fc <main+0xb0>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a26      	ldr	r2, [pc, #152]	@ (80001fc <main+0xb0>)
 8000164:	f043 0304 	orr.w	r3, r3, #4
 8000168:	6013      	str	r3, [r2, #0]

	// AFIO Clock
	RCC_APB2ENR |= 1;
 800016a:	4b24      	ldr	r3, [pc, #144]	@ (80001fc <main+0xb0>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a23      	ldr	r2, [pc, #140]	@ (80001fc <main+0xb0>)
 8000170:	f043 0301 	orr.w	r3, r3, #1
 8000174:	6013      	str	r3, [r2, #0]


	// Pin configuration
	GPIOA_CRL &= ~(0xFFFFFFFF);		// Reset configuration
 8000176:	4b22      	ldr	r3, [pc, #136]	@ (8000200 <main+0xb4>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4b21      	ldr	r3, [pc, #132]	@ (8000200 <main+0xb4>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]

	GPIOA_CRL |= 0xB00;			// Configure A2 as TX to send data (output mode push-pull)
 8000180:	4b1f      	ldr	r3, [pc, #124]	@ (8000200 <main+0xb4>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a1e      	ldr	r2, [pc, #120]	@ (8000200 <main+0xb4>)
 8000186:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800018a:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= 0x8000;		// Configure A3 as RX to receive data (input mode push-pull)
 800018c:	4b1c      	ldr	r3, [pc, #112]	@ (8000200 <main+0xb4>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a1b      	ldr	r2, [pc, #108]	@ (8000200 <main+0xb4>)
 8000192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000196:	6013      	str	r3, [r2, #0]


	// USART Enable
	USART2_CR1 |= 1 << 13;
 8000198:	4b1a      	ldr	r3, [pc, #104]	@ (8000204 <main+0xb8>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a19      	ldr	r2, [pc, #100]	@ (8000204 <main+0xb8>)
 800019e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80001a2:	6013      	str	r3, [r2, #0]

	// TX & RX Enable
	USART2_CR1 |= 1 << 2;		// Enable RX
 80001a4:	4b17      	ldr	r3, [pc, #92]	@ (8000204 <main+0xb8>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a16      	ldr	r2, [pc, #88]	@ (8000204 <main+0xb8>)
 80001aa:	f043 0304 	orr.w	r3, r3, #4
 80001ae:	6013      	str	r3, [r2, #0]
	USART2_CR1 |= 1 << 3;		// Enable TX
 80001b0:	4b14      	ldr	r3, [pc, #80]	@ (8000204 <main+0xb8>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a13      	ldr	r2, [pc, #76]	@ (8000204 <main+0xb8>)
 80001b6:	f043 0308 	orr.w	r3, r3, #8
 80001ba:	6013      	str	r3, [r2, #0]

	// Baud rate
	int system_clock = 8000000;
 80001bc:	4b12      	ldr	r3, [pc, #72]	@ (8000208 <main+0xbc>)
 80001be:	60fb      	str	r3, [r7, #12]
	int baud_rate = 9600;
 80001c0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80001c4:	60bb      	str	r3, [r7, #8]
	USART2_BRR = (system_clock + (baud_rate/2)) / baud_rate;
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	0fda      	lsrs	r2, r3, #31
 80001ca:	4413      	add	r3, r2
 80001cc:	105b      	asrs	r3, r3, #1
 80001ce:	461a      	mov	r2, r3
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	441a      	add	r2, r3
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	fb92 f2f3 	sdiv	r2, r2, r3
 80001da:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <main+0xc0>)
 80001dc:	601a      	str	r2, [r3, #0]
	// USART Divider = System Clock / Baud Rate
	// To make sure integer value is either floor or ceiling we use the above equation

	while(1) {
		// Send
		char send = 'T';
 80001de:	2354      	movs	r3, #84	@ 0x54
 80001e0:	71fb      	strb	r3, [r7, #7]
		// while(!(USART2_SR & (1<<7)));  	// Wait until TXE (Ready to send next)
		while(!(USART2_SR & (1 << 6)));		// Wait until TC (bit 6) is set
 80001e2:	bf00      	nop
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <main+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d0f9      	beq.n	80001e4 <main+0x98>
		USART2_DR = send;					// data register to store the data to be transmitted
 80001f0:	4a08      	ldr	r2, [pc, #32]	@ (8000214 <main+0xc8>)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	6013      	str	r3, [r2, #0]
	while(1) {
 80001f6:	e7f2      	b.n	80001de <main+0x92>
 80001f8:	4002101c 	.word	0x4002101c
 80001fc:	40021018 	.word	0x40021018
 8000200:	40010800 	.word	0x40010800
 8000204:	4000440c 	.word	0x4000440c
 8000208:	007a1200 	.word	0x007a1200
 800020c:	40004408 	.word	0x40004408
 8000210:	40004400 	.word	0x40004400
 8000214:	40004404 	.word	0x40004404

08000218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800021c:	bf00      	nop
 800021e:	e7fd      	b.n	800021c <NMI_Handler+0x4>

08000220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000224:	bf00      	nop
 8000226:	e7fd      	b.n	8000224 <HardFault_Handler+0x4>

08000228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <MemManage_Handler+0x4>

08000230 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <BusFault_Handler+0x4>

08000238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800023c:	bf00      	nop
 800023e:	e7fd      	b.n	800023c <UsageFault_Handler+0x4>

08000240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000268:	f000 f82e 	bl	80002c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}

08000270 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800027c:	f7ff fff8 	bl	8000270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480b      	ldr	r0, [pc, #44]	@ (80002b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000282:	490c      	ldr	r1, [pc, #48]	@ (80002b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000284:	4a0c      	ldr	r2, [pc, #48]	@ (80002b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a09      	ldr	r2, [pc, #36]	@ (80002bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000298:	4c09      	ldr	r4, [pc, #36]	@ (80002c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002a6:	f000 f821 	bl	80002ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f7ff ff4f 	bl	800014c <main>
  bx lr
 80002ae:	4770      	bx	lr
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002b8:	08000354 	.word	0x08000354
  ldr r2, =_sbss
 80002bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002c0:	20000024 	.word	0x20000024

080002c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>
	...

080002c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002cc:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <HAL_IncTick+0x1c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b05      	ldr	r3, [pc, #20]	@ (80002e8 <HAL_IncTick+0x20>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4413      	add	r3, r2
 80002d8:	4a03      	ldr	r2, [pc, #12]	@ (80002e8 <HAL_IncTick+0x20>)
 80002da:	6013      	str	r3, [r2, #0]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000000 	.word	0x20000000
 80002e8:	20000020 	.word	0x20000020

080002ec <__libc_init_array>:
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	2600      	movs	r6, #0
 80002f0:	4d0c      	ldr	r5, [pc, #48]	@ (8000324 <__libc_init_array+0x38>)
 80002f2:	4c0d      	ldr	r4, [pc, #52]	@ (8000328 <__libc_init_array+0x3c>)
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	10a4      	asrs	r4, r4, #2
 80002f8:	42a6      	cmp	r6, r4
 80002fa:	d109      	bne.n	8000310 <__libc_init_array+0x24>
 80002fc:	f000 f81a 	bl	8000334 <_init>
 8000300:	2600      	movs	r6, #0
 8000302:	4d0a      	ldr	r5, [pc, #40]	@ (800032c <__libc_init_array+0x40>)
 8000304:	4c0a      	ldr	r4, [pc, #40]	@ (8000330 <__libc_init_array+0x44>)
 8000306:	1b64      	subs	r4, r4, r5
 8000308:	10a4      	asrs	r4, r4, #2
 800030a:	42a6      	cmp	r6, r4
 800030c:	d105      	bne.n	800031a <__libc_init_array+0x2e>
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f855 3b04 	ldr.w	r3, [r5], #4
 8000314:	4798      	blx	r3
 8000316:	3601      	adds	r6, #1
 8000318:	e7ee      	b.n	80002f8 <__libc_init_array+0xc>
 800031a:	f855 3b04 	ldr.w	r3, [r5], #4
 800031e:	4798      	blx	r3
 8000320:	3601      	adds	r6, #1
 8000322:	e7f2      	b.n	800030a <__libc_init_array+0x1e>
 8000324:	0800034c 	.word	0x0800034c
 8000328:	0800034c 	.word	0x0800034c
 800032c:	0800034c 	.word	0x0800034c
 8000330:	08000350 	.word	0x08000350

08000334 <_init>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr

08000340 <_fini>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr
