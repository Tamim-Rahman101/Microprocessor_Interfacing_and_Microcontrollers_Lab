
Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000348  08000348  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000348  08000348  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000348  08000348  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000348  08000348  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000348  08000348  00001348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800034c  0800034c  0000134c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000350  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000354  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000354  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000af1  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000439  00000000  00000000  00002b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00002f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000012d  00000000  00000000  00003108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fdd  00000000  00000000  00003235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001920  00000000  00000000  00004212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b471  00000000  00000000  00005b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00080fa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004e8  00000000  00000000  00080fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000814d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000330 	.word	0x08000330

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000330 	.word	0x08000330

0800014c <main>:
#define USART2_BRR	(*(volatile unsigned int *) (USART2_BASE + 0x08))
#define USART2_SR	(*(volatile unsigned int *) (USART2_BASE + 0x00))
#define USART2_DR	(*(volatile unsigned int *) (USART2_BASE + 0x04))


int main(){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
	// USART2 Clock
	RCC_APB1ENR |= 1 << 17;
 8000152:	4b28      	ldr	r3, [pc, #160]	@ (80001f4 <main+0xa8>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	4a27      	ldr	r2, [pc, #156]	@ (80001f4 <main+0xa8>)
 8000158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800015c:	6013      	str	r3, [r2, #0]

	// GPIOA Clock
	RCC_APB2ENR |= 1 << 2;
 800015e:	4b26      	ldr	r3, [pc, #152]	@ (80001f8 <main+0xac>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a25      	ldr	r2, [pc, #148]	@ (80001f8 <main+0xac>)
 8000164:	f043 0304 	orr.w	r3, r3, #4
 8000168:	6013      	str	r3, [r2, #0]

	// AFIO Clock
	RCC_APB2ENR |= 1;
 800016a:	4b23      	ldr	r3, [pc, #140]	@ (80001f8 <main+0xac>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a22      	ldr	r2, [pc, #136]	@ (80001f8 <main+0xac>)
 8000170:	f043 0301 	orr.w	r3, r3, #1
 8000174:	6013      	str	r3, [r2, #0]


	// Pin configuration
	GPIOA_CRL &= ~(0xFFFFFFFF);		// Reset configuration
 8000176:	4b21      	ldr	r3, [pc, #132]	@ (80001fc <main+0xb0>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4b20      	ldr	r3, [pc, #128]	@ (80001fc <main+0xb0>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]

	GPIOA_CRL |= 0xB00;			// Configure A2 as TX to send data (output mode push-pull)
 8000180:	4b1e      	ldr	r3, [pc, #120]	@ (80001fc <main+0xb0>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a1d      	ldr	r2, [pc, #116]	@ (80001fc <main+0xb0>)
 8000186:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800018a:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= 0x8000;		// Configure A3 as RX to receive data (input mode push-pull)
 800018c:	4b1b      	ldr	r3, [pc, #108]	@ (80001fc <main+0xb0>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a1a      	ldr	r2, [pc, #104]	@ (80001fc <main+0xb0>)
 8000192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000196:	6013      	str	r3, [r2, #0]


	// USART Enable
	USART2_CR1 |= 1 << 13;
 8000198:	4b19      	ldr	r3, [pc, #100]	@ (8000200 <main+0xb4>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a18      	ldr	r2, [pc, #96]	@ (8000200 <main+0xb4>)
 800019e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80001a2:	6013      	str	r3, [r2, #0]

	// TX & RX Enable
	USART2_CR1 |= 1 << 2;		// Enable RX
 80001a4:	4b16      	ldr	r3, [pc, #88]	@ (8000200 <main+0xb4>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a15      	ldr	r2, [pc, #84]	@ (8000200 <main+0xb4>)
 80001aa:	f043 0304 	orr.w	r3, r3, #4
 80001ae:	6013      	str	r3, [r2, #0]
	USART2_CR1 |= 1 << 3;		// Enable TX
 80001b0:	4b13      	ldr	r3, [pc, #76]	@ (8000200 <main+0xb4>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a12      	ldr	r2, [pc, #72]	@ (8000200 <main+0xb4>)
 80001b6:	f043 0308 	orr.w	r3, r3, #8
 80001ba:	6013      	str	r3, [r2, #0]

	// Baud rate
	int system_clock = 8000000;
 80001bc:	4b11      	ldr	r3, [pc, #68]	@ (8000204 <main+0xb8>)
 80001be:	60fb      	str	r3, [r7, #12]
	int baud_rate = 9600;
 80001c0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80001c4:	60bb      	str	r3, [r7, #8]
	USART2_BRR = (system_clock + (baud_rate/2)) / baud_rate;
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	0fda      	lsrs	r2, r3, #31
 80001ca:	4413      	add	r3, r2
 80001cc:	105b      	asrs	r3, r3, #1
 80001ce:	461a      	mov	r2, r3
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	441a      	add	r2, r3
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	fb92 f2f3 	sdiv	r2, r2, r3
 80001da:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <main+0xbc>)
 80001dc:	601a      	str	r2, [r3, #0]


		// Receive
		char receive;
	    // while(!(USART2_SR & (1<<5)));	// Wait until RXNE (bit 5) is set
		while(!(USART2_SR & (1 << 6)));
 80001de:	bf00      	nop
 80001e0:	4b0a      	ldr	r3, [pc, #40]	@ (800020c <main+0xc0>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d0f9      	beq.n	80001e0 <main+0x94>
	    receive = USART2_DR;
 80001ec:	4b08      	ldr	r3, [pc, #32]	@ (8000210 <main+0xc4>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	71fb      	strb	r3, [r7, #7]
	while(1) {
 80001f2:	e7f4      	b.n	80001de <main+0x92>
 80001f4:	4002101c 	.word	0x4002101c
 80001f8:	40021018 	.word	0x40021018
 80001fc:	40010800 	.word	0x40010800
 8000200:	4000440c 	.word	0x4000440c
 8000204:	007a1200 	.word	0x007a1200
 8000208:	40004408 	.word	0x40004408
 800020c:	40004400 	.word	0x40004400
 8000210:	40004404 	.word	0x40004404

08000214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000218:	bf00      	nop
 800021a:	e7fd      	b.n	8000218 <NMI_Handler+0x4>

0800021c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <HardFault_Handler+0x4>

08000224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000228:	bf00      	nop
 800022a:	e7fd      	b.n	8000228 <MemManage_Handler+0x4>

0800022c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000230:	bf00      	nop
 8000232:	e7fd      	b.n	8000230 <BusFault_Handler+0x4>

08000234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000238:	bf00      	nop
 800023a:	e7fd      	b.n	8000238 <UsageFault_Handler+0x4>

0800023c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000264:	f000 f82e 	bl	80002c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}

0800026c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000278:	f7ff fff8 	bl	800026c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480b      	ldr	r0, [pc, #44]	@ (80002ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800027e:	490c      	ldr	r1, [pc, #48]	@ (80002b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000280:	4a0c      	ldr	r2, [pc, #48]	@ (80002b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a09      	ldr	r2, [pc, #36]	@ (80002b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000294:	4c09      	ldr	r4, [pc, #36]	@ (80002bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002a2:	f000 f821 	bl	80002e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ff51 	bl	800014c <main>
  bx lr
 80002aa:	4770      	bx	lr
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002b4:	08000350 	.word	0x08000350
  ldr r2, =_sbss
 80002b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002bc:	20000024 	.word	0x20000024

080002c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC1_2_IRQHandler>
	...

080002c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c8:	4b05      	ldr	r3, [pc, #20]	@ (80002e0 <HAL_IncTick+0x1c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <HAL_IncTick+0x20>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4413      	add	r3, r2
 80002d4:	4a03      	ldr	r2, [pc, #12]	@ (80002e4 <HAL_IncTick+0x20>)
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000020 	.word	0x20000020

080002e8 <__libc_init_array>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	2600      	movs	r6, #0
 80002ec:	4d0c      	ldr	r5, [pc, #48]	@ (8000320 <__libc_init_array+0x38>)
 80002ee:	4c0d      	ldr	r4, [pc, #52]	@ (8000324 <__libc_init_array+0x3c>)
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	42a6      	cmp	r6, r4
 80002f6:	d109      	bne.n	800030c <__libc_init_array+0x24>
 80002f8:	f000 f81a 	bl	8000330 <_init>
 80002fc:	2600      	movs	r6, #0
 80002fe:	4d0a      	ldr	r5, [pc, #40]	@ (8000328 <__libc_init_array+0x40>)
 8000300:	4c0a      	ldr	r4, [pc, #40]	@ (800032c <__libc_init_array+0x44>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	42a6      	cmp	r6, r4
 8000308:	d105      	bne.n	8000316 <__libc_init_array+0x2e>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000310:	4798      	blx	r3
 8000312:	3601      	adds	r6, #1
 8000314:	e7ee      	b.n	80002f4 <__libc_init_array+0xc>
 8000316:	f855 3b04 	ldr.w	r3, [r5], #4
 800031a:	4798      	blx	r3
 800031c:	3601      	adds	r6, #1
 800031e:	e7f2      	b.n	8000306 <__libc_init_array+0x1e>
 8000320:	08000348 	.word	0x08000348
 8000324:	08000348 	.word	0x08000348
 8000328:	08000348 	.word	0x08000348
 800032c:	0800034c 	.word	0x0800034c

08000330 <_init>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr

0800033c <_fini>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr
