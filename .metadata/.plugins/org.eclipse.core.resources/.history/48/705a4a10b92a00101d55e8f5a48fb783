#define RCC_BASE 0x40021000

#define GPIOA_BASE 0x40010800

#define USART2_BASE 0x40004400



#define RCC_APB1ENR (*(volatile unsigned int *) (RCC_BASE + 0x1C))
#define RCC_APB2ENR (*(volatile unsigned int *) (RCC_BASE + 0x18))

#define GPIOA_CRL 	(*(volatile unsigned int *) (GPIOA_BASE + 0x00))

#define USART2_CR1	(*(volatile unsigned int *) (USART2_BASE + 0x0C))
#define USART2_BRR	(*(volatile unsigned int *) (USART2_BASE + 0x08))
#define USART2_SR	(*(volatile unsigned int *) (USART2_BASE + 0x00))
#define USART2_DR	(*(volatile unsigned int *) (USART2_BASE + 0x04))


int main(){
	// USART2 Clock
	RCC_APB1ENR |= 1 << 17;

	// GPIOA Clock
	RCC_APB2ENR |= 1 << 2;

	// AFIO Clock
	RCC_APB2ENR |= 1;


	// Pin configuration
	GPIOA_CRL &= ~(0xFFFFFFFF);		// Reset configuration

	GPIOA_CRL |= 0xB00;			// Configure A2 as TX to send data (output mode push-pull)
	GPIOA_CRL |= 0x8000;		// Configure A3 as RX to receive data (input mode push-pull)


	// USART Enable
	USART2_CR1 |= 1 << 13;

	// TX & RX Enable
	USART2_CR1 |= 1 << 2;		// Enable RX
	USART2_CR1 |= 1 << 3;		// Enable TX

	// Baud rate
	int system_clock = 36000000;
	int baud_rate = 9600;
	USART2_BRR = (system_clock + (baud_rate/2)) / baud_rate;
	// Baud rate = System Clock / USART Divider			USART Divider is a part of Baud Rate Register (BRR)
	// USART Divider = System Clock / Baud Rate
	// To make sure integer value is either floor or ceiling we use the above equation

	while(1) {
		char ch = 'T';

		while(!(USART2_SR & (1 << 6)));	// checks whether transmission is complete or not
										// upon transmission completion bit 6 will become 1
										// therefore USART_SR & (1 << 6) will become ~1 = 0 and break out of the loop
		USART2_DR = ch;		// data register to store the transmitted or received data
							// default data word size 8 bit DR[8:0]
	}
}

